// SHANE ANGEL CLOUD MEMORY SYSTEM - LOCAL VERSION
// Saves to local files first, then we'll add Google Drive

const fs = require('fs');
const path = require('path');

class AngelCloudMemorySystem {
  constructor() {
    this.memoryFolder = './memory-exports';
    this.isRunning = false;
    this.lastSave = null;
    this.conversationBuffer = [];
    this.initializeMemoryFolder();
    this.startAutoSave();
  }

  initializeMemoryFolder() {
    // Create memory-exports folder if it doesn't exist
    if (!fs.existsSync(this.memoryFolder)) {
      fs.mkdirSync(this.memoryFolder, { recursive: true });
    }
    console.log('✅ Local memory folder initialized');
  }

  // CAPTURE THIS CONVERSATION
  captureConversation() {
    const conversationData = {
      timestamp: new Date().toISOString(),
      topic: "Angel Cloud Memory System Setup & Google Drive Integration",
      keyDecisions: [
        "Created angel-cloud GitHub repository",
        "Set up Google Drive API service account", 
        "Built automated memory system with local fallback",
        "Configured VS Code development environment"
      ],
      technicalWork: [
        "Successfully created Google Cloud service account",
        "Shared Drive folder with service account email",
        "Built Node.js memory automation system",
        "Installed googleapis package",
        "Troubleshot authentication issues"
      ],
      problemsSolved: [
        "Fixed file path issues for credentials.json",
        "Resolved module not found errors",
        "Set up proper folder structure",
        "Configured Google Drive API permissions"
      ],
      nextSteps: [
        "Fix Google Drive authentication",
        "Test memory system with real conversations",
        "Build Max Headroom avatar interface for Angel Cloud",
        "Set up voice mode integration",
        "Create automated backup system"
      ],
      urgency: "High - Core memory functionality needed",
      sessionLength: "Extended troubleshooting and setup session",
      codeCreated: ["memory-system.js", "Google Drive integration", "Auto-save system"]
    };

    return conversationData;
  }

  // SAVE TO LOCAL FILES (WORKS IMMEDIATELY)
  saveMemoryLocally(conversationData) {
    try {
      const sessionId = this.generateSessionId();
      const fileName = `Session_${sessionId}.md`;
      const filePath = path.join(this.memoryFolder, fileName);
      const content = this.generateSessionContent(conversationData);

      // Save session file
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`✅ Memory saved locally: ${fileName}`);

      // Update current session focus
      this.updateCurrentSessionFocus(conversationData);
      
      return fileName;
    } catch (error) {
      console.error('❌ Failed to save memory locally:', error);
    }
  }

  generateSessionId() {
    const now = new Date();
    return `${now.getFullYear()}-${String(now.getMonth()+1).padStart(2,'0')}-${String(now.getDate()).padStart(2,'0')}_${String(now.getHours()).padStart(2,'0')}-${String(now.getMinutes()).padStart(2,'0')}`;
  }

  generateSessionContent(data) {
    return `# 🧠 ANGEL CLOUD MEMORY LOG
**Session**: ${this.generateSessionId()}
**Timestamp**: ${data.timestamp}
**Topic**: ${data.topic}

## 🎯 KEY DECISIONS MADE
${data.keyDecisions.map(d => `- ${d}`).join('\n')}

## 🔧 TECHNICAL WORK COMPLETED
${data.technicalWork.map(t => `- ${t}`).join('\n')}

## 🛠️ PROBLEMS SOLVED
${data.problemsSolved.map(p => `- ${p}`).join('\n')}

## 💻 CODE CREATED
${data.codeCreated.map(c => `- ${c}`).join('\n')}

## ⏭️ IMMEDIATE NEXT STEPS
${data.nextSteps.map((step, i) => `${i+1}. ${step}`).join('\n')}

## 📊 SESSION METADATA
- **Urgency Level**: ${data.urgency}
- **Session Type**: ${data.sessionLength}
- **Auto-saved**: ${new Date().toLocaleTimeString()}
- **System**: Angel Cloud Memory v1.0 (Local)

---
*Generated by Shane's Angel Cloud Intelligence System*
*Next: Add Google Drive sync capability*`;
  }

  updateCurrentSessionFocus(data) {
    const focusContent = `# 🎯 CURRENT SESSION FOCUS
**Last Updated**: ${new Date().toLocaleString()}

## **ACTIVE PRIORITY**
${data.topic}

## **KEY PROGRESS THIS SESSION**
${data.keyDecisions.slice(0, 3).map(d => `- ${d}`).join('\n')}

## **IMMEDIATE NEXT STEPS**
${data.nextSteps.slice(0, 3).map((step, i) => `${i+1}. ${step}`).join('\n')}

## **STATUS**
- **Urgency**: ${data.urgency}
- **Last Memory Save**: ${new Date().toLocaleTimeString()}
- **Technical Issues**: Google Drive auth - using local backup

---
*Auto-updated by Angel Cloud Local System*`;

    try {
      const focusPath = path.join(this.memoryFolder, 'CURRENT_SESSION_FOCUS.md');
      fs.writeFileSync(focusPath, focusContent, 'utf8');
      console.log('✅ Current Session Focus updated locally');
    } catch (error) {
      console.error('❌ Failed to update session focus:', error);
    }
  }

  // AUTO-SAVE SYSTEM
  startAutoSave() {
    console.log('🚀 Angel Cloud local auto-save system started');
    
    // Initial save to test the system
    setTimeout(() => {
      this.autoSave();
    }, 2000); // Save after 2 seconds

    // Save every 10 minutes for local testing
    setInterval(() => {
      this.autoSave();
    }, 600000); // 10 minutes
  }

  async autoSave() {
    if (this.isRunning) return;
    this.isRunning = true;

    try {
      console.log('💾 Auto-saving conversation memory locally...');
      const conversationData = this.captureConversation();
      this.saveMemoryLocally(conversationData);
      this.lastSave = new Date();
      console.log(`✅ Local auto-save completed: ${this.lastSave.toLocaleTimeString()}`);
    } catch (error) {
      console.error('❌ Auto-save failed:', error);
    } finally {
      this.isRunning = false;
    }
  }

  // MANUAL CONTROLS
  forceSave() {
    console.log('🚨 Force saving memory locally...');
    this.autoSave();
    return "🚀 Force save completed - Check your memory-exports folder!";
  }

  getStatus() {
    return {
      memoryFolder: this.memoryFolder,
      isRunning: this.isRunning,
      lastSave: this.lastSave?.toLocaleString() || 'Never',
      folderExists: fs.existsSync(this.memoryFolder),
      fileCount: this.getFileCount()
    };
  }

  getFileCount() {
    try {
      const files = fs.readdirSync(this.memoryFolder);
      return files.filter(f => f.endsWith('.md')).length;
    } catch {
      return 0;
    }
  }

  // LIST SAVED MEMORIES
  listMemories() {
    try {
      const files = fs.readdirSync(this.memoryFolder);
      const memories = files.filter(f => f.endsWith('.md'));
      console.log('📚 Saved Memories:');
      memories.forEach(file => console.log(`  - ${file}`));
      return memories;
    } catch (error) {
      console.log('📂 No memories found yet');
      return [];
    }
  }
}

// INITIALIZE THE SYSTEM
const angelCloud = new AngelCloudMemorySystem();

// EXPORT FOR MANUAL CONTROL
global.angelCloud = angelCloud;

console.log('🧠 ANGEL CLOUD LOCAL MEMORY SYSTEM ACTIVATED');
console.log('💾 Auto-saving to ./memory-exports folder every 10 minutes');
console.log('🎮 Manual controls:');
console.log('   angelCloud.forceSave() - Force save now');
console.log('   angelCloud.getStatus() - Check system status');
console.log('   angelCloud.listMemories() - Show saved conversations');

module.exports = AngelCloudMemorySystem;