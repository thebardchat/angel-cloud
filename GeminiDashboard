import React, { useEffect, useMemo, useRef, useState } from "react";
import { Users, Bot, Zap, Settings, Activity, Plus, Shield } from "lucide-react";

/* =======================
    Retro FX + Audio Hooks
   ======================= */

function useAudioBank(urlMap) {
  const ctxRef = useRef(null);
  const buffersRef = useRef({});
  const readyRef = useRef(false);

  useEffect(() => {
    const ctx = new (window.AudioContext || window.webkitAudioContext)();
    ctxRef.current = ctx;

    const load = async (name, url) => {
      if (!url) return;
      const res = await fetch(url);
      const arr = await res.arrayBuffer();
      buffersRef.current[name] = await ctx.decodeAudioData(arr);
    };

    (async () => {
      const entries = Object.entries(urlMap || {});
      for (const [name, url] of entries) await load(name, url);
      readyRef.current = true;
    })();

    return () => ctx.close();
  }, [urlMap]);

  const play = (name, { volume = 0.7, detune = 0 } = {}) => {
    if (!readyRef.current) return;
    const ctx = ctxRef.current;
    const buf = buffersRef.current[name];
    if (!buf) return;
    const src = ctx.createBufferSource();
    src.buffer = buf;
    if (src.detune) src.detune.value = detune;
    const gain = ctx.createGain();
    gain.gain.value = volume;
    src.connect(gain).connect(ctx.destination);
    src.start();
  };

  return { play };
}

const sfx = {
  // drop your own hosted files here:
  // pacman: "/audio/pacman_game_over.wav",
  // blip: "/audio/ui_blip.wav",
  // glitch: "/audio/glitch_tick.wav",
  pacman: "",
  blip: "",
  glitch: ""
};

/* Glitchy label that occasionally stutters like Max */
const GlitchText = ({ children, className = "" }) => {
  const [ghost, setGhost] = useState("");
  useEffect(() => {
    const id = setInterval(() => {
      if (Math.random() < 0.18) setGhost(children);
      else setGhost("");
    }, 700);
    return () => clearInterval(id);
  }, [children]);
  return (
    <span className={`relative inline-block glitch ${className}`} data-text={children}>
      {children}
      <span aria-hidden className="glitch-layer glitch-r">{ghost}</span>
      <span aria-hidden className="glitch-layer glitch-b">{ghost}</span>
    </span>
  );
};

/* CRT bezel + scanlines wrapper */
const CRTFrame = ({ children }) => {
  return (
    <div className="relative">
      <div className="crt-wrap rounded-xl overflow-hidden border border-cyan-400/40 shadow-[0_0_30px_rgba(0,255,255,0.2)]">
        {children}
      </div>
      <div className="pointer-events-none absolute inset-0 rounded-xl ring-1 ring-cyan-400/20" />
    </div>
  );
};

/* Q*bert-style isometric loading cubes */
const QbertLoader = () => {
  const cubes = useMemo(() => {
    const arr = [];
    const rows = 6, cols = 6;
    for (let r = 0; r < rows; r++) for (let c = 0; c < cols; c++) arr.push({ r, c, key: `${r}-${c}` });
    return arr;
  }, []);
  return (
    <div className="relative mx-auto w-[280px] h-[220px] perspective">
      {cubes.map(({ r, c, key }) => {
        const x = (c - r) * 22;
        const y = (c + r) * 10;
        const delay = (r + c) * 0.06;
        return (
          <div
            key={key}
            className="iso-cube"
            style={{
              transform: `translate(calc(50% + ${x}px), ${y}px) skewY(-20deg) rotate(45deg)`,
              animationDelay: `${delay}s`
            }}
          />
        );
      })}
      <div className="absolute -bottom-2 left-1/2 -translate-x-1/2 text-xs text-cyan-300/80 tracking-widest">
        LOADING… PLEASE DON’T FEED THE AVATARS
      </div>
    </div>
  );
};

const NeonCard = ({ children }) => (
  <div className="bg-gray-900/70 backdrop-blur-sm p-6 rounded-lg border border-cyan-500/20 hover:border-cyan-400/40 transition-colors shadow-[inset_0_0_0_1px_rgba(0,255,255,0.04),0_0_30px_rgba(0,255,255,0.05)]">
    {children}
  </div>
);

/* =======================================
      The Angel Cloud Dashboard (v2)
   ======================================= */

const AngelCloudDashboard = () => {
  const [user, setUser] = useState(null);
  const [projects, setProjects] = useState([]);
  const [aiAgents, setAiAgents] = useState([]);
  const [systemStats, setSystemStats] = useState({});
  const [activeTab, setActiveTab] = useState("overview");
  const [booting, setBooting] = useState(true);

  const { play } = useAudioBank(sfx);

  useEffect(() => {
    // Simulate boot with Q*bert cubes
    const t = setTimeout(() => {
      loadDashboardData();
      setBooting(false);
    }, 1800);
    return () => clearTimeout(t);
  }, []);

  useEffect(() => {
    // keyboard shortcuts
    const map = { Digit1: "overview", Digit2: "projects", Digit3: "agents", Digit4: "users", Digit5: "settings" };
    const onKey = (e) => {
      if (map[e.code]) {
        setActiveTab(map[e.code]);
        play("blip");
      }
      if (e.key.toLowerCase() === "n") {
        play("blip");
        createNewProject();
      }
      if (e.key.toLowerCase() === "a") {
        play("blip");
        createNewAgent();
      }
    };
    window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [projects, aiAgents]); // eslint-disable-line

  const loadDashboardData = async () => {
    setUser({
      id: "user123",
      username: "Shane",
      email: "shane@angelcloud.com",
      role: "admin",
      joinedAt: "2025-08-11"
    });

    setProjects([
      { id: "proj1", name: "SRM Dispatch System", status: "active", type: "automation" },
      { id: "proj2", name: "Max Headroom Avatar", status: "development", type: "ai-interface" },
      { id: "proj3", name: "Voice Mode Integration", status: "planning", type: "voice-ai" }
    ]);

    setAiAgents([
      { id: "agent1", name: "Claude Assistant", type: "claude", status: "online" },
      { id: "agent2", name: "Voice Agent", type: "voice", status: "idle" },
      { id: "agent3", name: "Automation Bot", type: "custom", status: "working" }
    ]);

    setSystemStats({
      totalUsers: 12,
      activeProjects: 8,
      aiAgentsOnline: 15,
      systemUptime: "99.9%"
    });
  };

  const createNewProject = () => {
    const projectName = window.prompt("Enter project name:");
    if (projectName) {
      const newProject = {
        id: "proj" + Date.now(),
        name: projectName,
        status: "planning",
        type: "custom"
      };
      setProjects((p) => [...p, newProject]);
    }
  };

  const createNewAgent = () => {
    const agentName = window.prompt("Enter AI agent name:");
    if (agentName) {
      const newAgent = {
        id: "agent" + Date.now(),
        name: agentName,
        type: "custom",
        status: "idle"
      };
      setAiAgents((a) => [...a, newAgent]);
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      active: "bg-green-500",
      online: "bg-green-500",
      working: "bg-blue-500",
      development: "bg-yellow-500",
      idle: "bg-gray-400",
      planning: "bg-purple-500"
    };
    return colors[status] || "bg-gray-400";
  };

  const TabButton = ({ id, icon: Icon, label }) => (
    <button
      onClick={() => {
        setActiveTab(id);
        play("blip");
      }}
      className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${
        activeTab === id ? "bg-cyan-600 text-white" : "text-cyan-200/80 hover:bg-cyan-700/30"
      }`}
    >
      <Icon size={20} />
      <span>{label}</span>
    </button>
  );

  return (
    <div className="min-h-screen bg-black text-white relative overflow-hidden">
      {/* animated grid backdrop */}
      <div className="absolute inset-0 retro-grid opacity-30" />

      <CRTFrame>
        {/* scanline overlay is inside CRTFrame via CSS */}
        {/* Header */}
        <header className="bg-gray-900/70 border-b border-cyan-500/20 px-6 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="text-2xl font-bold text-cyan-300 tracking-wide">
              <GlitchText>⚡ ANGEL CLOUD</GlitchText>
            </div>
            <div className="text-xs md:text-sm text-cyan-200/70">INTELLIGENCE HUB v2.0</div>
          </div>
          <div className="flex items-center space-x-3">
            <div className="text-sm">
              <span className="text-cyan-200/70">Welcome back, </span>
              <span className="text-cyan-300 font-medium">{user?.username}</span>
            </div>
            {user?.role === "admin" && (
              <div className="flex items-center space-x-1 bg-cyan-700/60 px-2 py-1 rounded text-xs border border-cyan-300/30">
                <Shield size={12} />
                <span>Admin</span>
              </div>
            )}
          </div>
        </header>

        {booting ? (
          <div className="p-10">
            <QbertLoader />
          </div>
        ) : (
          <div className="flex">
            {/* Sidebar */}
            <nav className="w-64 bg-gray-950/60 min-h-[calc(100vh-64px)] p-4 border-r border-cyan-500/20">
              <div className="space-y-2">
                <TabButton id="overview" icon={Activity} label="Overview (1)" />
                <TabButton id="projects" icon={Zap} label="Projects (2)" />
                <TabButton id="agents" icon={Bot} label="AI Agents (3)" />
                <TabButton id="users" icon={Users} label="Users (4)" />
                <TabButton id="settings" icon={Settings} label="Settings (5)" />
              </div>
              <div className="mt-6 text-[10px] text-cyan-200/60">
                Shortcuts: <kbd>N</kbd> New Project • <kbd>A</kbd> New Agent
              </div>
            </nav>

            {/* Main */}
            <main className="flex-1 p-6 scanline-content">
              {activeTab === "overview" && (
                <div className="space-y-6">
                  <h1 className="text-3xl font-bold">
                    <GlitchText>Angel Cloud Hub</GlitchText>
                  </h1>

                  {/* Stats */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    {[
                      { label: "Total Users", value: systemStats.totalUsers },
                      { label: "Active Projects", value: systemStats.activeProjects },
                      { label: "AI Agents Online", value: systemStats.aiAgentsOnline },
                      { label: "System Uptime", value: systemStats.systemUptime }
                    ].map((stat, i) => (
                      <NeonCard key={i}>
                        <div className="text-2xl font-bold text-white">{stat.value}</div>
                        <div className="text-sm text-cyan-200/80">{stat.label}</div>
                      </NeonCard>
                    ))}
                  </div>

                  {/* Quick Actions */}
                  <NeonCard>
                    <h2 className="text-xl font-semibold mb-4">Quick Actions</h2>
                    <div className="flex flex-wrap gap-4">
                      <button
                        onClick={() => {
                          play("blip");
                          createNewProject();
                        }}
                        className="flex items-center space-x-2 bg-cyan-600 hover:bg-cyan-700 px-4 py-2 rounded-lg transition-colors border border-cyan-300/30"
                      >
                        <Plus size={16} />
                        <span>New Project</span>
                      </button>
                      <button
                        onClick={() => {
                          play("blip");
                          createNewAgent();
                        }}
                        className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg transition-colors border border-green-300/30"
                      >
                        <Plus size={16} />
                        <span>New AI Agent</span>
                      </button>
                      <button
                        onClick={() => {
                          // A dramatic "fail" cue—like Pac-Man game over
                          play("pacman", { volume: 0.9 });
                          alert("SYSTEM: Retro fail cue played. (Wire your Pac-Man SFX URL in sfx.pacman)");
                        }}
                        className="flex items-center space-x-2 bg-rose-700 hover:bg-rose-800 px-4 py-2 rounded-lg transition-colors border border-rose-300/30"
                      >
                        <Zap size={16} />
                        <span>Panic Test</span>
                      </button>
                    </div>
                  </NeonCard>
                </div>
              )}

              {activeTab === "projects" && (
                <div className="space-y-6">
                  <div className="flex justify-between items-center">
                    <h1 className="text-3xl font-bold">
                      <GlitchText>Projects</GlitchText>
                    </h1>
                    <button
                      onClick={() => {
                        play("blip");
                        createNewProject();
                      }}
                      className="flex items-center space-x-2 bg-cyan-600 hover:bg-cyan-700 px-4 py-2 rounded-lg transition-colors border border-cyan-300/30"
                    >
                      <Plus size={16} />
                      <span>New Project</span>
                    </button>
                  </div>

                  <div className="grid gap-4">
                    {projects.map((project) => (
                      <NeonCard key={project.id}>
                        <div className="flex items-center justify-between">
                          <div>
                            <h3 className="text-lg font-semibold">{project.name}</h3>
                            <p className="text-cyan-200/80 text-sm capitalize">{project.type}</p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <div className={`w-3 h-3 rounded-full ${getStatusColor(project.status)}`}></div>
                            <span className="text-sm capitalize">{project.status}</span>
                          </div>
                        </div>
                      </NeonCard>
                    ))}
                  </div>
                </div>
              )}

              {activeTab === "agents" && (
                <div className="space-y-6">
                  <div className="flex justify-between items-center">
                    <h1 className="text-3xl font-bold">
                      <GlitchText>AI Agents</GlitchText>
                    </h1>
                    <button
                      onClick={() => {
                        play("blip");
                        createNewAgent();
                      }}
                      className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg transition-colors border border-green-300/30"
                    >
                      <Plus size={16} />
                      <span>New Agent</span>
                    </button>
                  </div>

                  <div className="grid gap-4">
                    {aiAgents.map((agent) => (
                      <NeonCard key={agent.id}>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            <Bot size={24} className="text-cyan-300" />
                            <div>
                              <h3 className="text-lg font-semibold">{agent.name}</h3>
                              <p className="text-cyan-200/80 text-sm capitalize">{agent.type}</p>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <div className={`w-3 h-3 rounded-full ${getStatusColor(agent.status)}`}></div>
                            <span className="text-sm capitalize">{agent.status}</span>
                          </div>
                        </div>
                      </NeonCard>
                    ))}
                  </div>
                </div>
              )}

              {activeTab === "users" && (
                <div className="space-y-6">
                  <h1 className="text-3xl font-bold">
                    <GlitchText>Users</GlitchText>
                  </h1>
                  <NeonCard>
                    <div className="text-cyan-200/80 text-sm">
                      Coming soon: user roster with retro ID cards & motion trails.
                    </div>
                  </NeonCard>
                </div>
              )}

              {activeTab === "settings" && (
                <div className="space-y-6">
                  <h1 className="text-3xl font-bold">
                    <GlitchText>Settings</GlitchText>
                  </h1>
                  <NeonCard>
                    <div className="text-sm text-cyan-200/80 space-y-2">
                      <p>Wire up your sound files in the <code>sfx</code> map at the top:</p>
                      <pre className="bg-black/60 p-3 rounded border border-cyan-500/20 overflow-auto">
{`const sfx = {
  pacman: "/audio/pacman_game_over.wav",
  blip: "/audio/ui_blip.wav",
  glitch: "/audio/glitch_tick.wav"
};`}
                      </pre>
                      <p>Scanlines, CRT warp, glitch layers are pure CSS and included below.</p>
                    </div>
                  </NeonCard>
                </div>
              )}
            </main>
          </div>
        )}
      </CRTFrame>

      {/* Style block for the retro magic */}
      <style>{`
        /* animated retro grid background */
        .retro-grid {
          background:
            radial-gradient(circle at 50% 0%, rgba(0,255,255,0.09), transparent 50%),
            linear-gradient(rgba(0,255,255,0.08) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0,255,255,0.08) 1px, transparent 1px);
          background-size: 100% 100%, 40px 40px, 40px 40px;
          animation: gridFloat 18s linear infinite;
        }
        @keyframes gridFloat {
          0% { background-position: 0 0, 0 0, 0 0; }
          100% { background-position: 0 0, 0 40px, 40px 0; }
        }

        /* CRT scanlines + light barrel warp */
        .crt-wrap {
          position: relative;
        }
        .crt-wrap::after {
          content: "";
          position: absolute;
          inset: 0;
          pointer-events: none;
          background:
            repeating-linear-gradient(
              to bottom,
              rgba(0,0,0,0.15) 0px,
              rgba(0,0,0,0.15) 1px,
              rgba(0,0,0,0.05) 2px,
              rgba(0,0,0,0.05) 3px
            );
          mix-blend-mode: multiply;
          filter: contrast(110%) brightness(105%);
        }
        .scanline-content {
          transform: perspective(1200px) translateZ(0) scale(1.002);
        }

        /* Glitch text layers */
        .glitch {
          position: relative;
          text-shadow:
            0 0 2px rgba(0,255,255,0.8),
            0 0 10px rgba(0,255,255,0.4);
        }
        .glitch:before,
        .glitch .glitch-layer {
          content: attr(data-text);
          position: absolute;
          left: 0; top: 0;
          width: 100%;
          clip-path: polygon(0 2%, 100% 0, 100% 100%, 0 98%);
          pointer-events: none;
        }
        .glitch-r {
          color: #a0ffff;
          transform: translate(1px, 0);
          animation: glitchShift 2s infinite;
          text-shadow: -1px 0 rgba(255,0,80,0.7);
        }
        .glitch-b {
          color: #00ffff;
          transform: translate(-1px, 0);
          animation: glitchShift 1.7s infinite;
          text-shadow: 1px 0 rgba(0,80,255,0.7);
        }
        @keyframes glitchShift {
          0% { transform: translate(0,0); opacity: 0.6; }
          10% { transform: translate(2px,-1px); }
          20% { transform: translate(-2px,1px); }
          30% { transform: translate(1px,0); opacity: 0.9; }
          100% { transform: translate(0,0); opacity: 0.6; }
        }

        /* Isometric cubes for Q*bert loader */
        .perspective { perspective: 800px; }
        .iso-cube {
          position: absolute;
          left: 0; top: 0;
          width: 26px; height: 26px;
          background:
            linear-gradient(135deg, rgba(0,255,255,0.9), rgba(0,255,255,0.25));
          border: 1px solid rgba(0,255,255,0.4);
          box-shadow:
            inset 0 0 10px rgba(0,255,255,0.5),
            0 6px 14px rgba(0,255,255,0.15);
          border-radius: 2px;
          animation: isoPulse 1.4s ease-in-out infinite;
        }
        @keyframes isoPulse {
          0%, 100% { filter: brightness(0.9); transform-origin: center; }
          50% { filter: brightness(1.25) contrast(1.1); }
        }
      `}</style>
    </div>
  );
};

export default AngelCloudDashboard;
